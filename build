#!/bin/bash -e

IP="192.168.0.254"
IP_HEX=`printf '%02X' ${IP//./ } | awk '{print tolower($0)}'`
# We want `IP_HEX` in network byte order
IP_HEX=${IP_HEX:2:2}${IP_HEX:0:2}${IP_HEX:6:2}${IP_HEX:4:2}

# Set temporary nameserver
mv /etc/resolv.conf /etc/resolv.conf.tmp
echo 'nameserver 1.1.1.1' > /etc/resolv.conf

# Set hostname
echo "synth" > /etc/hostname
echo "127.0.0.1 localhost.localdomain localhost synth" >> /etc/hosts

# Initialize pacman
pacman-key --init
pacman-key --populate archlinuxarm

# System update
pacman -Syu --noconfirm

# Install packages
pacman -S --noconfirm \
	linux-aarch64-headers \
	base-devel \
	cmake \
	clang \
	git \
	wget \
	uboot-tools \
	boost \
	avahi \
	wireplumber \
	pipewire-alsa \
	alsa-utils

cat > /etc/systemd/network/eth.network << EOL
[Match]
Name=eth*

[Network]
DHCP=no
DNSSEC=no
Address=${IP}/24
Gateway=0.0.0.0
DNS=0.0.0.0
EOL

# Set bashrc variable
echo "TERM=xterm" >> /home/alarm/.bashrc
echo "TERM=xterm" >> /root/.bashrc

# Add `alarm` user to the `audio` group. Without this the `alarm` user will not see any alsa devices
usermod --append --groups audio alarm

mkdir -p /home/alarm/.config/systemd/user/pipewire.service.d
mkdir -p /home/alarm/.config/pipewire
chown -R alarm:alarm /home/alarm/.config

# Build channel-count
git clone --depth 1 --branch main https://github.com/elektrofon/channel-count.git /home/alarm/channel-count

cd /home/alarm/channel-count
make
make install

# Build aes67-linux-daemon
git clone --depth 1 --branch eurorack-to-aes67 https://github.com/elektrofon/aes67-linux-daemon.git /home/alarm/aes67-linux-daemon

# Patch Ravanne driver Makefile to get the right kernel headers
cd /home/alarm/aes67-linux-daemon/3rdparty

git clone --single-branch --branch aes67-daemon https://github.com/bondagit/ravenna-alsa-lkm.git

cd /home/alarm/aes67-linux-daemon/3rdparty/ravenna-alsa-lkm

git apply << 'EOL'
diff --git a/driver/Makefile b/driver/Makefile
index fadf054..4291920 100644
--- a/driver/Makefile
+++ b/driver/Makefile
@@ -7,7 +7,7 @@ obj-m := MergingRavennaALSA.o
 MergingRavennaALSA-objs := c_wrapper_lib.o audio_driver.o manager.o module_main.o PTP.o module_interface.o module_netlink.o module_timer.o EtherTubeNetfilter.o RTP_streams_manager.o RTP_audio_stream.o RTP_stream.o RTP_stream_info.o MTAL_EthUtils.o MTAL_LKernelAPI.o MTConvert.o
 
 MAKE = make
-KSRC = /lib/modules/$(shell uname -r)/build/
+KSRC = /lib/modules/$(shell pacman -Q linux-aarch64-headers | sed 's/.* //')-ARCH/build/
 SRC = $(shell pwd)
 
 modules:
EOL

cd /home/alarm/aes67-linux-daemon/3rdparty/ravenna-alsa-lkm/driver
make
cd /home/alarm

cd /home/alarm/aes67-linux-daemon
./build.sh
cd -

cp /home/alarm/aes67-linux-daemon/3rdparty/ravenna-alsa-lkm/driver/MergingRavennaALSA.ko /lib/modules/`pacman -Q 'linux-aarch64-headers' | sed 's/.* //'`-ARCH/kernel/drivers

depmod `pacman -Q 'linux-aarch64-headers' | sed 's/.* //'`-ARCH

# Instead of `sysctl -w net/ipv4/igmp_max_memberships=66` call (not working under `systemd-nspawn`):
echo "net.ipv4.igmp_max_memberships = 66" > /etc/sysctl.d/99-sysctl.conf

echo "MergingRavennaALSA" > /etc/modules-load.d/MergingRavennaALSA.conf

chown -R alarm:alarm /home/alarm/aes67-linux-daemon

cat > /etc/udev/rules.d/usb-sound.rules << 'EOL'
ACTION=="add", SUBSYSTEM=="sound", SUBSYSTEMS=="usb", ENV{ID_TYPE}=="audio", SYMLINK+="usb-sound", TAG+="systemd", ENV{SYSTEMD_USER_WANTS}+="usb-to-aes67@%E{ID_MODEL}.service"
EOL

su alarm << 'EOT'
cat > /home/alarm/.asoundrc << 'EOL'
pcm.hw {
	rate 48000
}
EOL

cat > /home/alarm/start.sh << 'EOL'
#!/bin/bash

# If device argument is not provided, fall back to systemd listing
DEVICE=$(systemctl --type=device --all | gawk '/dev-usb/ {print $5}')
if [ $# -gt 0 ]
then
    DEVICE=$1
fi

# Wait for AES67 daemon PTP to lock
IP=$(ip -4 address show eth0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}')

until /usr/bin/curl http://${IP}:8080/api/ptp/status | grep \"locked\"; do
    sleep 1
done

# Ensure pipewire is stopped
systemctl --user stop pipewire wireplumber

# Get ALSA device name and channel counts
RESULT=$(channel-count -U $DEVICE)
DEVICE=$(echo "$RESULT" | awk '/Device:/ {print $2}')
INPUTS=$(echo "$RESULT" | awk '/Inputs:/ {print $2}')
OUTPUTS=$(echo "$RESULT" | awk '/Outputs:/ {print $2}')

# Create default config for pipewire
CONFIG=$(
cat << EOS
    #default.clock.quantum       = 64
    default.clock.min-quantum   = 64
    #default.clock.max-quantum   = 1024
EOS
)

# Create sinks and sources config for pipewire
FACTORIES=$(
cat << EOS
    { factory = adapter
        args = {
            factory.name           = api.alsa.pcm.sink
            node.name              = "ravenna"
            node.description       = "RAVENNA Sink"
            media.class            = "Audio/Sink"
            api.alsa.path          = "hw:RAVENNA"
            api.alsa.period-size   = 128
            api.alsa.headroom      = 0
            api.alsa.disable-mmap  = false
            api.alsa.disable-batch = false
            audio.format           = "S24_3LE"
            audio.rate             = 48000
            audio.channels         = ${INPUTS}
        }
    }
    { factory = adapter
        args = {
            factory.name           = api.alsa.pcm.source
            node.name              = "ravenna"
            node.description       = "RAVENNA Source"
            media.class            = "Audio/Source"
            api.alsa.path          = "hw:RAVENNA"
            api.alsa.period-size   = 128
            api.alsa.headroom      = 0
            api.alsa.disable-mmap  = false
            api.alsa.disable-batch = false
            audio.format           = "S24_3LE"
            audio.rate             = 48000
            audio.channels         = ${OUTPUTS}
        }
    }
    { factory = adapter
        args = {
            factory.name           = api.alsa.pcm.sink
            node.name              = "usb"
            node.description       = "USB Sink"
            media.class            = "Audio/Sink"
            api.alsa.path          = "${DEVICE}"
            api.alsa.period-size   = 1024
            api.alsa.headroom      = 0
            latency.internal.rate  = 256
            api.alsa.disable-mmap  = false
            api.alsa.disable-batch = false
            audio.format           = "S24_LE"
            audio.rate             = 48000
            audio.channels         = ${INPUTS}
        }
    }
    { factory = adapter
        args = {
            factory.name           = api.alsa.pcm.source
            node.name              = "usb"
            node.description       = "USB Source"
            media.class            = "Audio/Source"
            api.alsa.path          = "${DEVICE}"
            api.alsa.period-size   = 1024
            api.alsa.headroom      = 0
            latency.internal.rate  = 256
            api.alsa.disable-mmap  = false
            api.alsa.disable-batch = false
            audio.format           = "S24_LE"
            audio.rate             = 48000
            audio.channels         = ${OUTPUTS}
        }
    }
EOS
)

cp /usr/share/pipewire/pipewire.conf /home/alarm/
awk -v config="$CONFIG" '/context\.properties = \{/ {print;print config;next}1' /usr/share/pipewire/pipewire.conf > /home/alarm/pipewire.conf
awk -v factories="$FACTORIES" '/context\.objects = \[/ {print;print factories;next}1' /home/alarm/pipewire.conf > /home/alarm/.config/pipewire/pipewire.conf

# Start pipewire
systemctl --user start pipewire wireplumber

# Link devices (max 8 inputs and outputs, ref `clock.min-quantum` in pipewire.conf)
MAX_INPUTS_LINKS=$(($INPUTS  < 8 ? $INPUTS : 8))
MAX_OUTPUT_LINKS=$(($OUTPUTS  < 8 ? $OUTPUTS : 8))

for i in $(seq 1 $MAX_INPUT_LINKS)
do
    echo "Trying to link usb:capture_${i} and ravenna:playback_${i}"
    until /usr/bin/pw-link "usb:capture_${i}" "ravenna:playback_${i}"; do
        sleep .5
    done
done

for i in $(seq 1 $MAX_OUTPUT_LINKS)
do
    echo "Trying to link ravenna:capture_${i} and usb:playback_${i}"
    until /usr/bin/pw-link "ravenna:capture_${i}" "usb:playback_${i}"; do
        sleep .5
    done
done
EOL

cat > /home/alarm/.config/systemd/user/boot.service << 'EOL'
[Unit]
Description=Boot service
After=aes67.service
After=dev-usb\x2dsound.device
Requires=aes67.service
Requisite=dev-usb\x2dsound.device

[Service]
Type=oneshot
RemainAfterExit=true
ExecStart=/home/alarm/start.sh

[Install]
WantedBy=aes67.service
WantedBy=dev-usb\x2dsound.device
EOL

cat > /home/alarm/.config/systemd/user/usb-to-aes67@.service << 'EOL'
[Unit]
Description=Create config service
After=aes67.service
After=dev-usb\x2dsound.device
Requires=aes67.service
Requisite=dev-usb\x2dsound.device
BindsTo=dev-usb\x2dsound.device
PropagatesStopTo=pipewire.service wireplumber.service pipewire.socket

[Service]
WorkingDirectory=/home/alarm
Type=oneshot
RemainAfterExit=yes
Restart=on-failure
RestartSec=1
ExecStart=/home/alarm/start.sh %i
StandardOutput=journal

[Install]
WantedBy=aes67.service
WantedBy=dev-usb\x2dsound.device
EOL

cat > /home/alarm/.config/systemd/user/aes67.service << 'EOL'
[Unit]
Description=AES67 daemon service
# After=network.target
StartLimitIntervalSec=0

[Service]
Type=simple
Restart=on-failure
RestartSec=1
WorkingDirectory=/home/alarm/aes67-linux-daemon/daemon
ExecStart=/home/alarm/aes67-linux-daemon/daemon/aes67-daemon -c daemon.conf
ExecStartPost=/bin/sleep 5

[Install]
WantedBy=default.target
EOL

cat > /home/alarm/aes67-linux-daemon/daemon/daemon.conf << 'EOL'
{
  "http_port": 8080,
  "rtsp_port": 8854,
  "http_base_dir": "../webui/dist",
  "log_severity": 2,
  "playout_delay": 0,
  "tic_frame_size_at_1fs": 64,
  "max_tic_frame_size": 1024,
  "sample_rate": 48000,
  "rtp_mcast_base": "239.1.0.1",
  "rtp_port": 5004,
  "ptp_domain": 0,
  "ptp_dscp": 48,
  "sap_mcast_addr": "239.255.255.255",
  "sap_interval": 30,
  "syslog_proto": "none",
  "syslog_server": "255.255.255.254:1234",
  "status_file": "./status.json",
  "mdns_enabled": true,
  "interface_name": "eth0"
}
EOL

cat > /home/alarm/aes67-linux-daemon/daemon/status.json << EOL
{
  "sources": [
    {
      "id": 0,
      "enabled": true,
      "name": "Source",
      "io": "Audio Device",
      "max_samples_per_packet": 48,
      "codec": "L24",
      "address": "239.1.0.1",
      "ttl": 15,
      "payload_type": 98,
      "dscp": 34,
      "refclk_ptp_traceable": false,
      "map": [ 0, 1, 2, 3, 4, 5, 6, 7 ]
    }
  ],
  "sinks": [
  ]
}
EOL
EOT

chmod +x /home/alarm/start.sh

# FIXME: Not sure if this is necessary
systemctl set-default multi-user.target

# Without linger, aes67 service will not start before user logs in
mkdir -p /var/lib/systemd/linger
touch /var/lib/systemd/linger/alarm

systemctl enable avahi-daemon

su alarm -c 'systemctl --user enable aes67 boot'

#############################################
# Cleanup and setting read-only file system #
#############################################

# Remove unneeded locales
shopt -s extglob
rm -rvf /usr/share/locale/!(en_US|locale.alias)

# Restore DNS conf
# FIXME: This throws "Device or resource busy" error
# mv /etc/resolv.conf.tmp /etc/resolv.conf

# Remove unneeded packages
# boost is still needed as a linked library for the aes67 daemon, so don't remove it
pacman -Rsu --noconfirm \
	linux-aarch64-headers \
	base-devel \
	cmake \
	clang \
	git \
	wget \
	uboot-tools

# Clear Pacman cache:
pacman -Sc --noconfirm

# Clear history:
history -c -w

# Disable system log to SD card:
echo "Storage=none" >> /etc/systemd/journald.conf

# Set SD card to read-only
sed -i 's/defaults/defaults,ro,errors=remount-ro/g' /etc/fstab

# Set SD card partitions to read-only, and write log and tmp to ram disk:
# Root partition is kept at RW for now, so AES67 web interface will be fully functional (adding/removing sources/sinks)
cat > /etc/fstab << 'EOL'
# Static information about the filesystems.
# See fstab(5) for details.

# <file system>		<dir>		<type>	<options>							<dump>	<pass>
# /dev/mmcblk1p2		/			ext4    defaults,ro,errors=remount-ro		0		0
/dev/mmcblk1p1		/boot		vfat    defaults,ro,errors=remount-ro		0		0
tmpfs				/var/log	tmpfs	nodev,nosuid						0		0
tmpfs				/var/tmp	tmpfs	nodev,nosuid						0		0
EOL

# Set root partition to read-only:
sed -i 's/ rw / ro /g' /boot/boot.txt

# Compile boot.txt
cd /boot && ./mkscr && cd -

# Disable loading and saving the system random seed at boot and shutdown
systemctl disable systemd-random-seed

# Relocate resolv.conf to ramdisk
ln -sf /var/run/resolv.conf /etc/resolv.conf

# Create scripts to enable/disable write protection
cat > /home/alarm/writeenable.sh << 'EOL'
mount -o remount,rw /
mount -o remount,rw /boot
EOL

cat > /home/alarm/writedisable.sh << 'EOL'
mount -o remount,ro /
mount -o remount,ro /boot
EOL

chmod +x /home/alarm/writeenable.sh
chmod +x /home/alarm/writedisable.sh
